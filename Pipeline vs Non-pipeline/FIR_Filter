`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 03/18/2025 05:17:45 PM
// Design Name: 
// Module Name: FIR_nonPipelined
// Project Name: 
// Target Devices: 
//////////////////////////////////////////////////////////////////////////////////


module FIR_Filter(clk, reset, data_in, data_out);

    parameter N = 8; // Input and output bit width
    parameter COEFF_WIDTH = 6; // Coefficient bit width

    input clk, reset;
    input [N-1:0] data_in;
    output reg [N-1:0] data_out;

    // Coefficients for a 3rd-order moving average filter
    wire [COEFF_WIDTH-1:0] h0 = 6'b000001; // 1 in decimal
    wire [COEFF_WIDTH-1:0] h1 = 6'b000010; // 2 in decimal
    wire [COEFF_WIDTH-1:0] h2 = 6'b000011; // 3 in decimal
    wire [COEFF_WIDTH-1:0] h3 = 6'b000010; // 2 in decimal
    wire [COEFF_WIDTH-1:0] h4 = 6'b000001; // 1 in decimal

    // Delayed inputs
    wire [N-1:0] x1, x2, x3, x4;

    // Instantiate D Flip Flops for delays
    DFF DFF0(clk, reset, data_in, x1); // x[n-1]
    DFF DFF1(clk, reset, x1, x2);      // x[n-2]
    DFF DFF2(clk, reset, x2, x3);      // x[n-3]
    DFF DFF3(clk, reset, x3, x4);      // x[n-4]
    
    // Multiplication
    wire [N+COEFF_WIDTH-1:0] Mul0, Mul1, Mul2, Mul3, Mul4;
    assign Mul0 = data_in * h0; // 8-bit * 6-bit = 14-bit
    assign Mul1 = x1 * h1;      // 8-bit * 6-bit = 14-bit
    assign Mul2 = x2 * h2;      // 8-bit * 6-bit = 14-bit
    assign Mul3 = x3 * h3;      // 8-bit * 6-bit = 14-bit
    assign Mul4 = x4 * h4;      // 8-bit * 6-bit = 14-bit

    // Addition
    wire [N+COEFF_WIDTH+1:0] Add_final; // 16-bit to hold the sum
    assign Add_final = Mul0 + Mul1 + Mul2 + Mul3 + Mul4;

    // Scaling back to 8-bit range
    wire [N-1:0] scaled_output;
    assign scaled_output = Add_final >> COEFF_WIDTH; // Divide by 64 (2^6)

    // Output assignment
    always @(posedge clk or posedge reset) begin
        if (reset)
            data_out <= 0;
        else
            data_out <= scaled_output;
    end

endmodule

module DFF(clk, reset, data_in, data_delayed);
    parameter N = 8; // Bit width
    input clk, reset;
    input [N-1:0] data_in;
    output reg [N-1:0] data_delayed;

    always @(posedge clk or posedge reset) begin
        if (reset)
            data_delayed <= 0;
        else
            data_delayed <= data_in;
    end
endmodule
